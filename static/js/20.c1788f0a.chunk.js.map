{"version":3,"file":"static/js/20.c1788f0a.chunk.js","mappings":"8JAQe,SAASA,IAKtB,OAJAC,EAAAA,EAAAA,YAAU,KACMC,SAASC,iBAAiB,OAClCC,SAASC,GAASC,EAAAA,EAAKC,eAAeF,IAAM,GACjD,KAEDG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,6bAYzBC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,+LAMzBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,+BAC/BF,EAAAA,EAAAA,MAAA,KAAGI,UAAU,YAAWF,SAAA,CAAC,cACX,KACZC,EAAAA,EAAAA,KAAA,KAAGE,KAAK,qCAAoCH,SAAC,iBAAgB,sJAK/DC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,mCAC/BC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,gHAOzBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,4CAC/BC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,wKAKzBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBF,SAAA,mIAWlCC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,kDAG/BC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,6FAIzBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBF,SAAA,qEAKlCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,yFAOzBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,iDAG/BC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,uFAIzBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBF,SAAA,oOAWlCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,4FAIzBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBF,SAAA,oRAWlCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,0EAMzBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,gCAC/BC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,sFAIzBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBF,SAAA,gwCAmDlCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,2GAKzBF,EAAAA,EAAAA,MAAA,KAAGI,UAAU,YAAWF,SAAA,CAAC,2HAE4B,KACnDC,EAAAA,EAAAA,KAAA,KAAGE,KAAK,wIAAuIH,SAAC,yBAOlJC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,gBAC/BC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,+XAU/B,CAxMAJ,EAAAA,EAAKQ,iBAAiB,QCCtB,SAAgBR,GACd,MAAMS,EAAQT,EAAKS,MACbC,EAAW,qCACXC,EAAiB,CACrB,MACA,KACA,SACA,QACA,QACA,QACA,OACA,QACA,WACA,MACA,MACA,OACA,OACA,SACA,UACA,MACA,OACA,SACA,KACA,SACA,KACA,KACA,SACA,QACA,cACA,MACA,KACA,OACA,QACA,SACA,MACA,QACA,OACA,SAuGIC,EAAW,CACfC,SAAU,sBACVC,QAASH,EACTI,SAvGgB,CAChB,aACA,MACA,MACA,MACA,QACA,MACA,OACA,aACA,YACA,QACA,WACA,MACA,cACA,UACA,UACA,UACA,OACA,MACA,SACA,YACA,OACA,OACA,SACA,QACA,SACA,YACA,UACA,UACA,UACA,OACA,OACA,MACA,KACA,QACA,MACA,aACA,aACA,OACA,MACA,OACA,SACA,MACA,MACA,aACA,MACA,OACA,SACA,MACA,OACA,MACA,MACA,QACA,WACA,QACA,OACA,WACA,QACA,MACA,UACA,QACA,SACA,eACA,MACA,MACA,QACA,QACA,OACA,OACA,OAmCAC,QAhCe,CACf,YACA,WACA,QACA,OACA,iBACA,QA2BAC,KArBY,CACZ,MACA,WACA,YACA,OACA,OACA,UACA,UACA,WACA,WACA,MACA,QACA,OACA,UAWIC,EAAS,CACbZ,UAAW,OACXa,MAAO,kBAGHC,EAAQ,CACZd,UAAW,QACXa,MAAO,KACPE,IAAK,KACLC,SAAUV,EACVW,QAAS,KAGLC,EAAkB,CACtBL,MAAO,OACPM,UAAW,GAGPC,EAAS,CACbpB,UAAW,SACXqB,SAAU,CAAE3B,EAAK4B,kBACjBC,SAAU,CACR,CACEV,MAAO,yCACPE,IAAK,MACLM,SAAU,CACR3B,EAAK4B,iBACLV,GAEFO,UAAW,IAEb,CACEN,MAAO,yCACPE,IAAK,MACLM,SAAU,CACR3B,EAAK4B,iBACLV,GAEFO,UAAW,IAEb,CACEN,MAAO,8BACPE,IAAK,MACLM,SAAU,CACR3B,EAAK4B,iBACLV,EACAM,EACAJ,IAGJ,CACED,MAAO,8BACPE,IAAK,MACLM,SAAU,CACR3B,EAAK4B,iBACLV,EACAM,EACAJ,IAGJ,CACED,MAAO,eACPE,IAAK,IACLI,UAAW,IAEb,CACEN,MAAO,eACPE,IAAK,IACLI,UAAW,IAEb,CACEN,MAAO,4BACPE,IAAK,KAEP,CACEF,MAAO,4BACPE,IAAK,KAEP,CACEF,MAAO,4BACPE,IAAK,IACLM,SAAU,CACR3B,EAAK4B,iBACLJ,EACAJ,IAGJ,CACED,MAAO,4BACPE,IAAK,IACLM,SAAU,CACR3B,EAAK4B,iBACLJ,EACAJ,IAGJpB,EAAK8B,iBACL9B,EAAK+B,oBAKHC,EAAY,kBACZC,EAAa,QAAHC,OAAWF,EAAS,WAAAE,OAAUF,EAAS,UAAAE,OAASF,EAAS,QAMnEG,EAAY,OAAHD,OAAUvB,EAAeyB,KAAK,MACvCC,EAAS,CACb/B,UAAW,SACXmB,UAAW,EACXI,SAAU,CAWR,CACEV,MAAO,QAAFe,OAAUF,EAAS,OAAAE,OAAMD,EAAU,gBAAAC,OAAeF,EAAS,aAAAE,OAAYC,EAAS,MAEvF,CACEhB,MAAO,IAAFe,OAAMD,EAAU,WASvB,CACEd,MAAO,0CAAFe,OAA4CC,EAAS,MAE5D,CACEhB,MAAO,4BAAFe,OAA8BC,EAAS,MAE9C,CACEhB,MAAO,6BAAFe,OAA+BC,EAAS,MAE/C,CACEhB,MAAO,mCAAFe,OAAqCC,EAAS,MAKrD,CACEhB,MAAO,OAAFe,OAASF,EAAS,YAAAE,OAAWC,EAAS,QAI3CG,EAAe,CACnBhC,UAAW,UACXa,MAAOV,EAAM0B,UAAU,WACvBd,IAAK,IACLC,SAAUV,EACVe,SAAU,CACR,CACER,MAAO,WAGT,CACEA,MAAO,IACPE,IAAK,OACLkB,gBAAgB,KAIhBC,EAAS,CACblC,UAAW,SACXuB,SAAU,CAER,CACEvB,UAAW,GACXa,MAAO,UACPsB,MAAM,GAER,CACEtB,MAAO,KACPE,IAAK,KACLqB,cAAc,EACdC,YAAY,EACZrB,SAAUV,EACVe,SAAU,CACR,OACAT,EACAmB,EACAX,EACA1B,EAAK4C,sBAWb,OANAxB,EAAMO,SAAW,CACfD,EACAW,EACAnB,GAGK,CACL2B,KAAM,SACNC,QAAS,CACP,KACA,MACA,WAEFC,cAAc,EACdzB,SAAUV,EACVW,QAAS,cACTI,SAAU,CACRT,EACAmB,EACA,CAEElB,MAAO,YAET,CAGE6B,cAAe,KACfvB,UAAW,GAEbC,EACAY,EACAtC,EAAK4C,kBACL,CACEK,MAAO,CACL,QAAS,MACTvC,GAEFwC,MAAO,CACL,EAAG,UACH,EAAG,kBAELvB,SAAU,CAAEa,IAEd,CACEX,SAAU,CACR,CACEoB,MAAO,CACL,UAAW,MACXvC,EAAU,MACV,QAASA,EAAS,UAGtB,CACEuC,MAAO,CACL,UAAW,MACXvC,KAINwC,MAAO,CACL,EAAG,UACH,EAAG,cACH,EAAG,0BAGP,CACE5C,UAAW,OACXa,MAAO,WACPE,IAAK,UACLM,SAAU,CACRU,EACAG,EACAd,KAKV,G","sources":["components/blogs/how_to_download_torrent_to_google_drive.js","../node_modules/highlight.js/es/languages/python.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport hljs from \"highlight.js/lib/core\";\nimport python from \"highlight.js/lib/languages/python\";\n// import \"highlight.js/styles/github-dark.css\";\nimport \"highlight.js/styles/atom-one-dark.css\";\n\nhljs.registerLanguage(\"dart\", python);\n\nexport default function How_to_download_torrent_to_google_drive() {\n  useEffect(() => {\n    const nodes = document.querySelectorAll(\"pre\");\n    nodes.forEach((node) => hljs.highlightBlock(node));\n  }, []);\n  return (\n    <>\n      <p className=\"body-text\">\n        Torrent files are a popular way to share large files online. However,\n        downloading them can be a hassle, especially if you don't have a good\n        internet connection or a lot of storage space on your computer.\n        Fortunately, there is a way to download torrent files directly to your\n        Google Drive account without downloading them yourself, so you can\n        access them from anywhere, without using your internet and also free up\n        space on your hard drive.\n      </p>\n\n      {/* <!-- adblock --> */}\n\n      <p className=\"body-text\">\n        Using a Google Colab script, you can easily download torrent files\n        directly to your Google Drive account without needing to use a\n        third-party cloud torrent service. Here's how to do it:\n      </p>\n\n      <h2 className=\"body-head mt-4\">Step 1: Open Google Colab</h2>\n      <p className=\"body-text\">\n        First, open{\" \"}\n        <a href=\"https://colab.research.google.com/\">Google Colab</a> in your\n        web browser. Google Colab is a cloud-based service that allows you to\n        write and run Python code in a Jupyter Notebook-style interface.\n      </p>\n\n      <h2 className=\"body-head mt-4\">Step 2: Create a New Notebook</h2>\n      <p className=\"body-text\">\n        Next, create a new Colab notebook by clicking \"New Notebook\" and\n        selecting \"Python 3\" as the runtime type.\n      </p>\n\n      {/* <!-- adblock --> */}\n\n      <h2 className=\"body-head mt-4\">Step 3: Import the Necessary Libraries</h2>\n      <p className=\"body-text\">\n        In the first code cell of your notebook, import the necessary libraries\n        for downloading and extracting the torrent file. This can be done with\n        the following code:\n      </p>\n      <pre className=\"code-block-simple\">\n        {`!apt install python3-libtorrent\n\nimport libtorrent as lt\n\nses = lt.session()\nses.listen_on(6881, 6891)\ndownloads = []\n`}\n      </pre>\n\n      <h2 className=\"body-head mt-4\">\n        Step 4: Connect to Your Google Drive Account\n      </h2>\n      <p className=\"body-text\">\n        Next, connect to your Google Drive account by running the following code\n        in a new cell:\n      </p>\n      <pre className=\"code-block-simple\">\n        {`from google.colab import drive\ndrive.mount(\"/content/drive\")\n`}\n      </pre>\n      <p className=\"body-text\">\n        This will prompt you to authorize Google Colab to access your Google\n        Drive account.\n      </p>\n\n      {/* <!-- adblock --> */}\n\n      <h2 className=\"body-head mt-4\">\n        Step 5: Add the Torrent File / Torrent Link\n      </h2>\n      <p className=\"body-text\">\n        In the next cell of your notebook, add the torrent file using the\n        following code:\n      </p>\n      <pre className=\"code-block-simple\">\n        {`from google.colab import files\n\nsource = files.upload()\nparams = {\n    \"save_path\": \"/content/drive/My Drive/Torrent\",\n    \"ti\": lt.torrent_info(list(source.keys())[0]),\n}\ndownloads.append(ses.add_torrent(params))\n`}\n      </pre>\n      <p className=\"body-text\">\n        Incase you have the torrent link, you can use the following code to add\n        link directly:\n      </p>\n      <pre className=\"code-block-simple\">\n        {`params = {\"save_path\": \"/content/drive/My Drive/Torrent\"}\n\nwhile True:\n    magnet_link = input(\"Enter Magnet Link Or Type Exit: \")\n    if magnet_link.lower() == \"exit\":\n        break\n    downloads.append(\n        lt.add_magnet_uri(ses, magnet_link, params)\n    )`}\n      </pre>\n      <p className=\"body-text\">\n        Just type \"exit\" and hit enter once you are done entering all links.\n      </p>\n\n      {/* <!-- adblock --> */}\n\n      <h2 className=\"body-head mt-4\">Step 7: Start the Download</h2>\n      <p className=\"body-text\">\n        Finally, start the download process by running the following code in a\n        new cell:\n      </p>\n      <pre className=\"code-block-simple\">\n        {`import time\nfrom IPython.display import display\nimport ipywidgets as widgets\n\nstate_str = [\n    \"queued\",\n    \"checking\",\n    \"downloading metadata\",\n    \"downloading\",\n    \"finished\",\n    \"seeding\",\n    \"allocating\",\n    \"checking fastresume\",\n]\n\nlayout = widgets.Layout(width=\"auto\")\nstyle = {\"description_width\": \"initial\"}\ndownload_bars = [\n    widgets.FloatSlider(\n        step=0.01, disabled=True, layout=layout, style=style\n    )\n    for _ in downloads\n]\ndisplay(*download_bars)\n\nwhile downloads:\n    next_shift = 0\n    for index, download in enumerate(downloads[:]):\n        bar = download_bars[index + next_shift]\n        if not download.is_seed():\n            s = download.status()\n\n            bar.description = \" \".join(\n                [\n                    download.name(),\n                    str(s.download_rate / 1000),\n                    \"kB/s\",\n                    state_str[s.state],\n                ]\n            )\n            bar.value = s.progress * 100\n        else:\n            next_shift -= 1\n            ses.remove_torrent(download)\n            downloads.remove(download)\n            bar.close()\n            download_bars.remove(bar)\n            print(download.name(), \"complete\")\n    time.sleep(1)`}\n      </pre>\n      <p className=\"body-text\">\n        This will start downloading the files contained within the torrent file\n        to your Google Drive account.\n      </p>\n\n      <p className=\"body-text\">\n        All Done! Wolah, your torrent should start downloading by now. If you\n        are facing any issues, you can always refer to the{\" \"}\n        <a href=\"https://colab.research.google.com/github/FKLC/Torrent-To-Google-Drive-Downloader/blob/master/Torrent_To_Google_Drive_Downloader.ipynb\">\n          full script here\n        </a>\n      </p>\n\n      {/* <!-- adblock --> */}\n\n      <h2 className=\"body-head mt-4\">Conclusion</h2>\n      <p className=\"body-text\">\n        By following these steps, you can easily download torrent files directly\n        to your Google Drive account using a Google Colab script. This can be a\n        convenient way to download torrent without worring about your internet\n        usage and free up space on your computer, while still being able to\n        access your files from anywhere, without needing to use a third-party\n        cloud torrent service.\n      </p>\n    </>\n  );\n}\n","/*\nLanguage: Python\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\nWebsite: https://www.python.org\nCategory: common\n*/\n\nfunction python(hljs) {\n  const regex = hljs.regex;\n  const IDENT_RE = /[\\p{XID_Start}_]\\p{XID_Continue}*/u;\n  const RESERVED_WORDS = [\n    'and',\n    'as',\n    'assert',\n    'async',\n    'await',\n    'break',\n    'case',\n    'class',\n    'continue',\n    'def',\n    'del',\n    'elif',\n    'else',\n    'except',\n    'finally',\n    'for',\n    'from',\n    'global',\n    'if',\n    'import',\n    'in',\n    'is',\n    'lambda',\n    'match',\n    'nonlocal|10',\n    'not',\n    'or',\n    'pass',\n    'raise',\n    'return',\n    'try',\n    'while',\n    'with',\n    'yield'\n  ];\n\n  const BUILT_INS = [\n    '__import__',\n    'abs',\n    'all',\n    'any',\n    'ascii',\n    'bin',\n    'bool',\n    'breakpoint',\n    'bytearray',\n    'bytes',\n    'callable',\n    'chr',\n    'classmethod',\n    'compile',\n    'complex',\n    'delattr',\n    'dict',\n    'dir',\n    'divmod',\n    'enumerate',\n    'eval',\n    'exec',\n    'filter',\n    'float',\n    'format',\n    'frozenset',\n    'getattr',\n    'globals',\n    'hasattr',\n    'hash',\n    'help',\n    'hex',\n    'id',\n    'input',\n    'int',\n    'isinstance',\n    'issubclass',\n    'iter',\n    'len',\n    'list',\n    'locals',\n    'map',\n    'max',\n    'memoryview',\n    'min',\n    'next',\n    'object',\n    'oct',\n    'open',\n    'ord',\n    'pow',\n    'print',\n    'property',\n    'range',\n    'repr',\n    'reversed',\n    'round',\n    'set',\n    'setattr',\n    'slice',\n    'sorted',\n    'staticmethod',\n    'str',\n    'sum',\n    'super',\n    'tuple',\n    'type',\n    'vars',\n    'zip'\n  ];\n\n  const LITERALS = [\n    '__debug__',\n    'Ellipsis',\n    'False',\n    'None',\n    'NotImplemented',\n    'True'\n  ];\n\n  // https://docs.python.org/3/library/typing.html\n  // TODO: Could these be supplemented by a CamelCase matcher in certain\n  // contexts, leaving these remaining only for relevance hinting?\n  const TYPES = [\n    \"Any\",\n    \"Callable\",\n    \"Coroutine\",\n    \"Dict\",\n    \"List\",\n    \"Literal\",\n    \"Generic\",\n    \"Optional\",\n    \"Sequence\",\n    \"Set\",\n    \"Tuple\",\n    \"Type\",\n    \"Union\"\n  ];\n\n  const KEYWORDS = {\n    $pattern: /[A-Za-z]\\w+|__\\w+__/,\n    keyword: RESERVED_WORDS,\n    built_in: BUILT_INS,\n    literal: LITERALS,\n    type: TYPES\n  };\n\n  const PROMPT = {\n    className: 'meta',\n    begin: /^(>>>|\\.\\.\\.) /\n  };\n\n  const SUBST = {\n    className: 'subst',\n    begin: /\\{/,\n    end: /\\}/,\n    keywords: KEYWORDS,\n    illegal: /#/\n  };\n\n  const LITERAL_BRACKET = {\n    begin: /\\{\\{/,\n    relevance: 0\n  };\n\n  const STRING = {\n    className: 'string',\n    contains: [ hljs.BACKSLASH_ESCAPE ],\n    variants: [\n      {\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\n        end: /'''/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT\n        ],\n        relevance: 10\n      },\n      {\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\n        end: /\"\"\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT\n        ],\n        relevance: 10\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])'''/,\n        end: /'''/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n        end: /\"\"\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([uU]|[rR])'/,\n        end: /'/,\n        relevance: 10\n      },\n      {\n        begin: /([uU]|[rR])\"/,\n        end: /\"/,\n        relevance: 10\n      },\n      {\n        begin: /([bB]|[bB][rR]|[rR][bB])'/,\n        end: /'/\n      },\n      {\n        begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n        end: /\"/\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])'/,\n        end: /'/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])\"/,\n        end: /\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\n  const digitpart = '[0-9](_?[0-9])*';\n  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\n  // Whitespace after a number (or any lexical token) is needed only if its absence\n  // would change the tokenization\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens\n  // We deviate slightly, requiring a word boundary or a keyword\n  // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)\n  const lookahead = `\\\\b|${RESERVED_WORDS.join('|')}`;\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      // exponentfloat, pointfloat\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\n      // optionally imaginary\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      // Note: no leading \\b because floats can start with a decimal point\n      // and we don't want to mishandle e.g. `fn(.5)`,\n      // no trailing \\b for pointfloat because it can end with a decimal point\n      // and we don't want to mishandle e.g. `0..hex()`; this should be safe\n      // because both MUST contain a decimal point and so cannot be confused with\n      // the interior part of an identifier\n      {\n        begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`\n      },\n      {\n        begin: `(${pointfloat})[jJ]?`\n      },\n\n      // decinteger, bininteger, octinteger, hexinteger\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\n      // optionally \"long\" in Python 2\n      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\n      // decinteger is optionally imaginary\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      {\n        begin: `\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`\n      },\n      {\n        begin: `\\\\b0[bB](_?[01])+[lL]?(?=${lookahead})`\n      },\n      {\n        begin: `\\\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`\n      },\n      {\n        begin: `\\\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`\n      },\n\n      // imagnumber (digitpart-based)\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      {\n        begin: `\\\\b(${digitpart})[jJ](?=${lookahead})`\n      }\n    ]\n  };\n  const COMMENT_TYPE = {\n    className: \"comment\",\n    begin: regex.lookahead(/# type:/),\n    end: /$/,\n    keywords: KEYWORDS,\n    contains: [\n      { // prevent keywords from coloring `type`\n        begin: /# type:/\n      },\n      // comment within a datatype comment includes no keywords\n      {\n        begin: /#/,\n        end: /\\b\\B/,\n        endsWithParent: true\n      }\n    ]\n  };\n  const PARAMS = {\n    className: 'params',\n    variants: [\n      // Exclude params in functions without params\n      {\n        className: \"\",\n        begin: /\\(\\s*\\)/,\n        skip: true\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          'self',\n          PROMPT,\n          NUMBER,\n          STRING,\n          hljs.HASH_COMMENT_MODE\n        ]\n      }\n    ]\n  };\n  SUBST.contains = [\n    STRING,\n    NUMBER,\n    PROMPT\n  ];\n\n  return {\n    name: 'Python',\n    aliases: [\n      'py',\n      'gyp',\n      'ipython'\n    ],\n    unicodeRegex: true,\n    keywords: KEYWORDS,\n    illegal: /(<\\/|\\?)|=>/,\n    contains: [\n      PROMPT,\n      NUMBER,\n      {\n        // very common convention\n        begin: /\\bself\\b/\n      },\n      {\n        // eat \"if\" prior to string so that it won't accidentally be\n        // labeled as an f-string\n        beginKeywords: \"if\",\n        relevance: 0\n      },\n      STRING,\n      COMMENT_TYPE,\n      hljs.HASH_COMMENT_MODE,\n      {\n        match: [\n          /\\bdef/, /\\s+/,\n          IDENT_RE,\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.function\"\n        },\n        contains: [ PARAMS ]\n      },\n      {\n        variants: [\n          {\n            match: [\n              /\\bclass/, /\\s+/,\n              IDENT_RE, /\\s*/,\n              /\\(\\s*/, IDENT_RE,/\\s*\\)/\n            ],\n          },\n          {\n            match: [\n              /\\bclass/, /\\s+/,\n              IDENT_RE\n            ],\n          }\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.class\",\n          6: \"title.class.inherited\",\n        }\n      },\n      {\n        className: 'meta',\n        begin: /^[\\t ]*@/,\n        end: /(?=#)|$/,\n        contains: [\n          NUMBER,\n          PARAMS,\n          STRING\n        ]\n      }\n    ]\n  };\n}\n\nexport { python as default };\n"],"names":["How_to_download_torrent_to_google_drive","useEffect","document","querySelectorAll","forEach","node","hljs","highlightBlock","_jsxs","_Fragment","children","_jsx","className","href","registerLanguage","regex","IDENT_RE","RESERVED_WORDS","KEYWORDS","$pattern","keyword","built_in","literal","type","PROMPT","begin","SUBST","end","keywords","illegal","LITERAL_BRACKET","relevance","STRING","contains","BACKSLASH_ESCAPE","variants","APOS_STRING_MODE","QUOTE_STRING_MODE","digitpart","pointfloat","concat","lookahead","join","NUMBER","COMMENT_TYPE","endsWithParent","PARAMS","skip","excludeBegin","excludeEnd","HASH_COMMENT_MODE","name","aliases","unicodeRegex","beginKeywords","match","scope"],"sourceRoot":""}